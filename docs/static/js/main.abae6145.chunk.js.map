{"version":3,"sources":["App.js","logo.svg","reportWebVitals.js","index.js"],"names":["replaceStateTimeoutId","DRAW_STATE_LABELS","handleMouseDown","drawState","drawStateSetterFunction","currentShapeIndexSetterFunction","currentSegmentIndexSetterFunction","event","target","dataset","isSegment","shapeIndex","pointIndex","Number","findLastOpenShapeIndex","shapes","findIndex","points","length","continueDrawing","cursorPosition","shapesSetterFunction","canvasBoundingClientRect","document","querySelector","getBoundingClientRect","clientX","left","right","clientY","top","bottom","newShapes","lastOpenShapeIndex","newAppState","map","shape","index","newShape","cursorPositionOrClosingPoint","distance","x","y","handleMouseMove","cursorPositionSetterFunction","currentShapeIndex","currentSegmentIndex","clientRect","point","x1","y1","x2","y2","a","b","Math","sqrt","App","useState","setDrawState","setCursorPosition","setCurrentShapeIndex","setCurrentSegmentIndex","name","defaults","state","setState","value","clearTimeout","setTimeout","window","location","href","indexOf","split","filter","Boolean","hashStates","found","builtHashStates","reduce","prev","current","hashName","hashValue","JSON","stringify","join","history","pushState","fragment","parse","decodeURIComponent","useHashedState","setShapes","refreshShapesState","useEffect","onpopstate","onhashchange","className","onMouseDown","onMouseMove","onMouseUp","xmlns","width","height","Array","fill","undefined","_","style","stroke","shapeWithCursor","pointsAsSVGString","head","tail","onClosingPoint","lines","cx","cy","r","keyIndex","push","previewSize","id","divider","onClick","preventDefault","svgImage","createElement","body","appendChild","onload","console","log","canvas","clientWidth","clientHeight","getContext","drawImage","imageDataURL","toDataURL","parentElement","removeChild","URL","revokeObjectURL","src","downloadLink","download","click","createObjectURL","Blob","getElementById","outerHTML","type","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.abae6145.chunk.js","sourcesContent":["import { useState, React, useEffect } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nconst DRAW_STATE_READY = 1;\nconst DRAW_STATE_START = 2;\nconst DRAW_STATE_MOVE_SEGMENT = 3;\n\nconst SHAPE_CLOSE_DISTANCE = 10;\n\nconst DRAW_STATE_LABELS = {\n  [DRAW_STATE_READY]: \"Click on canvas and drag it to start drawing\",\n  [DRAW_STATE_START]: \"Click on another point to connect with the latest\",\n  [DRAW_STATE_MOVE_SEGMENT]: \"Moving a segment of a shape\",\n};\n\nfunction handleMouseDown(\n  drawState,\n  drawStateSetterFunction,\n  currentShapeIndexSetterFunction,\n  currentSegmentIndexSetterFunction\n) {\n  return (event) => {\n    if (drawState === DRAW_STATE_READY) {\n      const { isSegment, shapeIndex, pointIndex } = event.target.dataset;\n      if (isSegment) {\n        currentShapeIndexSetterFunction(Number(shapeIndex));\n        currentSegmentIndexSetterFunction(Number(pointIndex));\n        drawStateSetterFunction(DRAW_STATE_MOVE_SEGMENT);\n      }\n    }\n  };\n}\n\nfunction findLastOpenShapeIndex(shapes) {\n  return shapes.findIndex(({ points }) => {\n    return points.length < 3 || points[0] !== points[points.length - 1];\n  });\n}\n\nfunction continueDrawing(\n  cursorPosition,\n  drawStateSetterFunction,\n  shapes,\n  shapesSetterFunction,\n  drawState\n) {\n  return (event) => {\n    if (drawState === DRAW_STATE_MOVE_SEGMENT) {\n      drawStateSetterFunction(DRAW_STATE_READY);\n    }\n\n    if (drawState === DRAW_STATE_START || drawState === DRAW_STATE_READY) {\n      const canvasBoundingClientRect = document\n        .querySelector(\".canvas\")\n        .getBoundingClientRect();\n      if (\n        event.clientX < canvasBoundingClientRect.left ||\n        event.clientX > canvasBoundingClientRect.right ||\n        event.clientY < canvasBoundingClientRect.top ||\n        event.clientY > canvasBoundingClientRect.bottom\n      ) {\n        return;\n      }\n\n      const lastOpenShapeIndex = findLastOpenShapeIndex(shapes);\n\n      let newShapes;\n      let newAppState = DRAW_STATE_START;\n      if (lastOpenShapeIndex === -1) {\n        newShapes = [...shapes, { points: [cursorPosition] }];\n      } else {\n        newShapes = shapes.map((shape, index) => {\n          let newShape;\n          if (index === lastOpenShapeIndex) {\n            let cursorPositionOrClosingPoint;\n\n            if (\n              distance(\n                cursorPosition.x,\n                cursorPosition.y,\n                shape.points[0].x,\n                shape.points[0].y\n              ) < SHAPE_CLOSE_DISTANCE\n            ) {\n              cursorPositionOrClosingPoint = shape.points[0];\n              newAppState = DRAW_STATE_READY;\n            } else {\n              cursorPositionOrClosingPoint = cursorPosition;\n            }\n\n            newShape = {\n              points: [...shape.points, cursorPositionOrClosingPoint],\n            };\n          } else {\n            newShape = shape;\n          }\n\n          return newShape;\n        });\n      }\n\n      drawStateSetterFunction(newAppState);\n      shapesSetterFunction(newShapes);\n    }\n  };\n}\n\nfunction handleMouseMove(\n  cursorPositionSetterFunction,\n  drawState,\n  currentShapeIndex,\n  currentSegmentIndex,\n  shapes,\n  shapesSetterFunction\n) {\n  return ({ clientX, clientY }) => {\n    const clientRect = document\n      .querySelector(\".canvas\")\n      .getBoundingClientRect();\n    const cursorPosition = {\n      x: clientX - clientRect.left,\n      y: clientY - clientRect.top,\n    };\n    cursorPositionSetterFunction(cursorPosition);\n\n    if (drawState === DRAW_STATE_MOVE_SEGMENT) {\n      shapesSetterFunction(\n        shapes.map((shape, shapeIndex) => ({\n          ...shape,\n          points: shape.points.map((point, pointIndex) =>\n            currentShapeIndex === shapeIndex &&\n            (currentSegmentIndex === pointIndex ||\n              (currentSegmentIndex === shape.points.length - 1 &&\n                pointIndex === 0))\n              ? cursorPosition\n              : point\n          ),\n        }))\n      );\n    }\n  };\n}\n\nlet replaceStateTimeoutId;\n\nfunction useHashedState(name, defaults) {\n  const [state, setState] = useState(defaults);\n  return [\n    state,\n    (value, callback = () => {}) => {\n      if (replaceStateTimeoutId) {\n        clearTimeout(replaceStateTimeoutId);\n      }\n\n      replaceStateTimeoutId = setTimeout(() => {\n        const [_, ...hashStates] = (\n          window.location.href.indexOf(\"#\") > -1\n            ? window.location.href.split(\"#\")\n            : [null]\n        ).filter(Boolean);\n\n        let found = false;\n        const builtHashStates = hashStates\n          .reduce((prev, current) => {\n            let [hashName, hashValue] = current.split(\"=\");\n            if (name === hashName) {\n              found = true;\n              hashValue = JSON.stringify(value);\n              hashName = name;\n            }\n\n            return [...prev, `${hashName}=${hashValue}`];\n          }, [])\n          .join(\"#\");\n\n        if (!found) {\n          window.history.pushState(\n            null,\n            null,\n            `${\n              builtHashStates && `#${builtHashStates}`\n            }#${name}=${JSON.stringify(value)}`\n          );\n        } else {\n          window.history.pushState(null, null, `#${builtHashStates}`);\n        }\n      }, 50);\n      setState(value);\n    },\n    () => {\n      const [head, fragment] = window.location.href.split(`#${name}=`);\n      if (fragment) {\n        const [value] = fragment.split(\"#\");\n        setState(JSON.parse(decodeURIComponent(value)));\n      }\n    },\n  ];\n}\n\nfunction distance(x1, y1, x2, y2) {\n  const a = x1 - x2;\n  const b = y1 - y2;\n  return Math.sqrt(a * a + b * b);\n}\n\nfunction App() {\n  const [drawState, setDrawState] = useState(DRAW_STATE_READY);\n  const [cursorPosition, setCursorPosition] = useState({ x: 0, y: 0 });\n  const [currentShapeIndex, setCurrentShapeIndex] = useState(-1);\n  const [currentSegmentIndex, setCurrentSegmentIndex] = useState(-1);\n  const [shapes, setShapes, refreshShapesState] = useHashedState(\"shapes\", []);\n  const lastOpenShapeIndex = findLastOpenShapeIndex(shapes);\n  const previews = [256, 128, 64, 32];\n\n  useEffect(() => {\n    refreshShapesState();\n    window.onpopstate = refreshShapesState;\n    window.onhashchange = refreshShapesState;\n  }, []);\n\n  return (\n    <div\n      className=\"app-container\"\n      onMouseDown={handleMouseDown(\n        drawState,\n        setDrawState,\n        setCurrentShapeIndex,\n        setCurrentSegmentIndex\n      )}\n      onMouseMove={handleMouseMove(\n        setCursorPosition,\n        drawState,\n        currentShapeIndex,\n        currentSegmentIndex,\n        shapes,\n        setShapes\n      )}\n      onMouseUp={continueDrawing(\n        cursorPosition,\n        setDrawState,\n        shapes,\n        setShapes,\n        drawState\n      )}\n    >\n      <h1>Stateless Icon Designer</h1>\n      <div className=\"editor\">\n        <h3>\n          #Canvas{\" \"}\n          <span className={\"drawing-info\"}>{DRAW_STATE_LABELS[drawState]}</span>\n        </h3>\n        <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"canvas\" width={512} height={512}>\n          {new Array(128).fill(undefined).map((_, index) => (\n            <line\n              key={`y-${index}`}\n              x1={0}\n              x2={512}\n              style={{\n                stroke: \"silver\",\n              }}\n              y1={index * 8}\n              y2={index * 8}\n            />\n          ))}\n          {new Array(128).fill(undefined).map((_, index) => (\n            <line\n              key={`x-${index}`}\n              y1={0}\n              y2={512}\n              style={{\n                stroke: \"silver\",\n              }}\n              x1={index * 8}\n              x2={index * 8}\n            />\n          ))}\n          <line\n            x1={0}\n            x2={512}\n            style={{ stroke: \"blue\" }}\n            y1={32 * 8}\n            y2={32 * 8}\n          />\n          <line\n            y1={0}\n            y2={512}\n            style={{ stroke: \"blue\" }}\n            x1={32 * 8}\n            x2={32 * 8}\n          />\n          {shapes.map((shape, index) => {\n            const shapeWithCursor = [...shape.points, cursorPosition];\n            const pointsAsSVGString = shapeWithCursor\n              .map(({ x, y }) => `${x},${y}`)\n              .join(\" \");\n            return (\n              <g key={index}>\n                <polygon points={pointsAsSVGString} fill={\"silver\"} />\n                {(() => {\n                  let [head, ...tail] =\n                    drawState === DRAW_STATE_START &&\n                    lastOpenShapeIndex === index\n                      ? shapeWithCursor\n                      : shape.points;\n                  const onClosingPoint =\n                    distance(\n                      head.x,\n                      head.y,\n                      cursorPosition.x,\n                      cursorPosition.y\n                    ) > SHAPE_CLOSE_DISTANCE;\n                  const lines = [\n                    <circle\n                      data-shape-index={index}\n                      data-point-index={0}\n                      className={\"segment\"}\n                      data-is-segment={true}\n                      data-is-closing-point={true}\n                      key={`closing-point-${index}`}\n                      cx={head.x}\n                      cy={head.y}\n                      fill={onClosingPoint ? \"orange\" : \"blue\"}\n                      r={5}\n                    />,\n                  ];\n                  let keyIndex = 0;\n                  for (const point of tail) {\n                    keyIndex++;\n                    lines.push(\n                      <g key={`segments-${index}-${keyIndex}`}>\n                        <circle\n                          data-shape-index={index}\n                          data-point-index={keyIndex}\n                          className={\"segment\"}\n                          data-is-segment={true}\n                          cx={point.x}\n                          cy={point.y}\n                          fill={\"gray\"}\n                          r={5}\n                        />\n                        <line\n                          stroke={\"black\"}\n                          x1={head.x}\n                          y1={head.y}\n                          x2={point.x}\n                          y2={point.y}\n                        />\n                      </g>\n                    );\n                    head = point;\n                  }\n                  return lines;\n                })()}\n              </g>\n            );\n          })}\n        </svg>\n      </div>\n      <div className=\"preview\">\n        {previews.map((previewSize, index) => (\n          <div className={\"preview-square\"} key={`preview-${index}`} style={{ width: previewSize }}>\n            <h3>\n              {previewSize}x{previewSize}\n            </h3>\n            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"canvas\" id={`preview-${index}`} width={previewSize} height={previewSize}>\n              {shapes.map((shape, index) => {\n                const divider = 512 / previewSize;\n                const pointsAsSVGString = shape.points\n                  .map(({ x, y }) => `${x / divider},${y / divider}`)\n                  .join(\" \");\n                return (\n                  <g key={index}>\n                    <polygon points={pointsAsSVGString} fill={\"black\"} />\n                  </g>\n                );\n              })}\n            </svg>\n            <a\n              href=\"#\"\n              className={'download-link'}\n              onClick={(event) => {\n                event.preventDefault();\n                const svgImage = document.createElement(\"img\");\n                svgImage.width = previewSize;\n                svgImage.height = previewSize;\n                document.body.appendChild(svgImage);\n                svgImage.onload = () => {\n                  console.log('onload')\n                  const canvas = document.createElement(\"canvas\");\n                  canvas.width = svgImage.clientWidth;\n                  canvas.height = svgImage.clientHeight;\n                  const canvasCtx = canvas.getContext(\"2d\");\n                  canvasCtx.drawImage(svgImage, 0, 0);\n                  const imageDataURL = canvas.toDataURL(\"image/png\");\n                  svgImage.parentElement.removeChild(svgImage);\n                  URL.revokeObjectURL(svgImage.src);\n                  const downloadLink = document.createElement(\"a\");\n                  downloadLink.href = imageDataURL;\n                  downloadLink.download = `icon-${previewSize}.png`;\n                  downloadLink.click();\n                };\n                svgImage.src = URL.createObjectURL(\n                  new Blob([document.getElementById(`preview-${index}`).outerHTML], {\n                    type: \"image/svg+xml\",\n                  })\n                );\n                console.log(svgImage.src)\n              }}\n            >\n              download\n            </a>\n          </div>\n        ))}\n      </div>\n      <h1>What does Stateless mean?</h1>\n      <p>\n        Stateless means the state of the application stored on the URL part of\n        the application. It is a web application architecture defines the\n        application as a framework and the access URI of the application as\n        content.\n      </p>\n      <h1>What are the advantages of it?</h1>\n      <ul>\n        <li>The content is undoable and redoable by design</li>\n        <li>The current state of document is bookmarkable</li>\n        <li>The application state is visible for user</li>\n        <li>The content can be updated in URL</li>\n        <li>\n          It does not need require a user authentication to share the content\n        </li>\n      </ul>\n      <h1>Who are you?</h1>\n      <p>\n        I am a software engineer with 10+ years of web development and design\n        experience. I am an open-source lover and I create development\n        productivity tools in my spare time. I am much more focused on\n        accessibility and health tech in my last years engineering experience; I\n        experiment to create an accessible, crystal-clear, discoverable user\n        interfaces for the end users.\n      </p>\n      <h1><a href=\"https://twitter.com/deeplyunhappie\">Follow me</a> but don't get me wrong</h1>\n      <p>\n        When I post something on a social media, please think the post is not\n        only about the content itself, but the process of posting the content\n        from the very beginning (the keypress events on my keyboard) to the very\n        end (the end user which is you, assigned with an IPv4 or IPv6 address;\n        probably there are at least 10 dynamic routers between us). I do\n        experimenting on web technologies and I need to post something and I\n        usually write something super random depending on my mood; including my\n        blog posts and articles.\n      </p>\n      <footer>Fatih Erikli — 2021 — Creative Commons</footer>\n    </div>\n  );\n}\n\nexport default App;\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}